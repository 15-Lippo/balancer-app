import { ToRefs } from "vue-demi";
import type { QueryObserver, QueryKey } from "react-query/core";
import type { UseBaseQueryOptions as UBQO, UseQueryResult } from "react-query/types/react/types";
import { WithQueryClientKey } from "./types";
export declare type UseBaseQueryOptions<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryData = unknown, TQueryKey extends QueryKey = QueryKey> = WithQueryClientKey<UBQO<TQueryFnData, TError, TData, TQueryData, TQueryKey>>;
export declare type UseQueryReturnType<TData, TError, Result = UseQueryResult<TData, TError>> = ToRefs<Readonly<Result>> & {
    suspense: () => Promise<Result>;
};
export declare function useBaseQuery<TQueryFnData, TError, TData, TQueryData, TQueryKey extends QueryKey>(options: UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>, Observer: typeof QueryObserver): UseQueryReturnType<TData, TError>;
