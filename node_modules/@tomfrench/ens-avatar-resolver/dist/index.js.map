{"version":3,"file":"index.js","sources":["../src/resolvers/arweave.ts","../src/utils.ts","../src/resolvers/erc1155.ts","../src/resolvers/erc721.ts","../src/resolvers/fallback.ts","../src/resolvers/index.ts","../src/index.ts"],"sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { Provider } from '@ethersproject/providers';\n\nconst arweaveRegex = new RegExp(/ar:\\/\\/(.*)/);\n\nconst parseURI = (uri: string): string => {\n  const result = arweaveRegex.exec(uri);\n  if (result === null) throw Error('parsing URI failed');\n  const [, transactionId] = result;\n  return transactionId;\n};\n\nconst test = (uri: string): boolean => arweaveRegex.exec(uri) !== null;\n\nconst resolve = async (provider: Provider, ensName: string, address: string, uri: string): Promise<string | null> => {\n  const transactionId = parseURI(uri);\n  const baseUrl = 'https://arweave.net';\n\n  const response = await fetch(`${baseUrl}/graphql`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json;charset=UTF-8',\n    },\n    body: JSON.stringify({\n      query: `\n      {\n        transactions(ids: [\"${transactionId}\"]) {\n          edges {\n            node {\n              id\n              owner {\n                address\n              }\n            }\n          }\n        }\n      }\n      `,\n    }),\n  });\n\n  const { data } = await response.json();\n  const tx = data.transactions.edges[0].node;\n\n  const response2 = await fetch(`${baseUrl}/graphql`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json;charset=UTF-8',\n    },\n    body: JSON.stringify({\n      query: `\n    {\n      transactions(owners: [\"${tx.owner.address}\"], tags: { name: \"Origin\", values: [\"${tx.id}\"] }, sort: HEIGHT_DESC) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n    `,\n    }),\n  });\n\n  const { data: data2 } = await response2.json();\n\n  if (data2 && data2.transactions.edges.length > 0) {\n    return `${baseUrl}/${data2.transactions.edges[0].node.id}`;\n  } else {\n    return `${baseUrl}/${transactionId}`;\n  }\n};\n\nexport const arweaveResolver = {\n  test,\n  resolve,\n};\n","export const getGatewayUrl = (uri: string, tokenId?: string): string => {\n  const match = new RegExp(/([a-z]+)(?::\\/\\/|\\/)(.*)/).exec(uri);\n\n  if (!match || match.length < 3) {\n    return uri;\n  }\n\n  const id = match[2];\n  let url = uri;\n\n  switch (match[1]) {\n    case 'ar': {\n      url = `https://arweave.net/${id}`;\n      break;\n    }\n    case 'ipfs':\n      if (id.includes('ipfs') || id.includes('ipns')) {\n        url = `https://gateway.ipfs.io/${id}`;\n      } else {\n        url = `https://gateway.ipfs.io/ipfs/${id}`;\n      }\n      break;\n    case 'ipns':\n      if (id.includes('ipfs') || id.includes('ipns')) {\n        url = `https://gateway.ipfs.io/${id}`;\n      } else {\n        url = `https://gateway.ipfs.io/ipns/${id}`;\n      }\n      break;\n    case 'http':\n    case 'https':\n      break;\n  }\n\n  return tokenId ? url.replace(/{id}/g, tokenId) : url;\n};\n","import fetch from 'isomorphic-fetch';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { getGatewayUrl } from '../utils';\n\nconst erc1155Regex = new RegExp(/eip155:1\\/erc1155:(\\w+)\\/(\\w+)/);\n\nconst erc1155Abi = [\n  'function balanceOf(address _owner, uint256 _id) view returns (uint256)',\n  'function uri(uint256 _id) view returns (string)',\n];\n\nconst parseURI = (uri: string): [string, BigNumber] => {\n  const result = erc1155Regex.exec(uri);\n  if (result === null) throw Error('parsing URI failed');\n  const [, contractAddress, tokenId] = result;\n  return [contractAddress, BigNumber.from(tokenId)];\n};\n\nconst test = (uri: string): boolean => erc1155Regex.exec(uri) !== null;\n\nconst resolve = async (provider: Provider, ensName: string, address: string, uri: string): Promise<string | null> => {\n  const [contractAddress, tokenId] = parseURI(uri);\n  const erc1155Contract = new Contract(contractAddress, erc1155Abi, provider);\n\n  const userBalance: BigNumber = await erc1155Contract.balanceOf(address, tokenId);\n\n  if (userBalance.isZero()) return null;\n\n  const tokenURI = await erc1155Contract.uri(tokenId);\n\n  const response = await fetch(getGatewayUrl(tokenURI, tokenId.toHexString().slice(2)));\n\n  return (await response.json()).image;\n};\n\nexport const erc1155Resolver = {\n  test,\n  resolve,\n};\n","import fetch from 'isomorphic-fetch';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { getGatewayUrl } from '../utils';\n\nconst erc721Regex = new RegExp(/eip155:1\\/erc721:(\\w+)\\/(\\w+)/);\n\nconst erc721Abi = [\n  'function ownerOf(uint256 tokenId) view returns (address)',\n  'function tokenURI(uint256 _tokenId) external view returns (string)',\n];\n\nconst parseURI = (uri: string): [string, BigNumber] => {\n  const result = erc721Regex.exec(uri);\n  if (result === null) throw Error('parsing URI failed');\n  const [, contractAddress, tokenId] = result;\n  return [contractAddress, BigNumber.from(tokenId)];\n};\n\nconst test = (uri: string): boolean => erc721Regex.exec(uri) !== null;\n\nconst resolve = async (provider: Provider, ensName: string, address: string, uri: string): Promise<string | null> => {\n  const [contractAddress, tokenId] = parseURI(uri);\n  const erc721Contract = new Contract(contractAddress, erc721Abi, provider);\n\n  const tokenOwner = await erc721Contract.ownerOf(tokenId);\n\n  if (tokenOwner.toLowerCase() !== address.toLowerCase()) return null;\n\n  const tokenURI = await erc721Contract.tokenURI(tokenId);\n\n  const response = await fetch(getGatewayUrl(tokenURI, tokenId.toHexString()));\n  return (await response.json()).image;\n};\n\nexport const erc721Resolver = {\n  test,\n  resolve,\n};\n","import { Provider } from '@ethersproject/providers';\nimport { getGatewayUrl } from '../utils';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst test = (uri: string): boolean => true;\n\nconst resolve = async (provider: Provider, ensName: string, address: string, uri: string): Promise<string | null> =>\n  getGatewayUrl(uri);\n\nexport const fallbackResolver = {\n  test,\n  resolve,\n};\n","import { AvatarResolver } from '../types';\nimport { arweaveResolver } from './arweave';\nimport { erc1155Resolver } from './erc1155';\nimport { erc721Resolver } from './erc721';\n\nexport const avatarResolvers: AvatarResolver[] = [erc721Resolver, erc1155Resolver, arweaveResolver];\nexport { fallbackResolver } from './fallback';\n","import { isAddress } from '@ethersproject/address';\nimport { EnsProvider, Provider } from '@ethersproject/providers';\nimport { avatarResolvers, fallbackResolver } from './resolvers';\n\nexport const _resolveAvatar = async (\n  provider: Provider & EnsProvider,\n  ensName: string,\n  address: string\n): Promise<string | null> => {\n  const resolver = await provider.getResolver(ensName);\n  if (resolver === null) return null;\n  const uri = await resolver.getText('avatar');\n  if (uri === null) return null;\n\n  const avatarResolver = avatarResolvers.find((resolver) => resolver.test(uri));\n  try {\n    if (avatarResolver !== undefined) {\n      return await avatarResolver.resolve(provider, ensName, address, uri);\n    }\n    return await fallbackResolver.resolve(provider, ensName, address, uri);\n  } catch {\n    return null;\n  }\n};\n\n/**\n * @notice Resolves the avatar attached to a given ENS name\n * @param provider A provider with ENS resolution capabilities\n * @param addressOrEns The ENS name (or address) to resolve the avatar of.\n * @returns a URL to the provided ENS name's avatar or null if no avatar exists\n */\nexport const resolveENSAvatar = async (\n  provider: Provider & EnsProvider,\n  addressOrEns: string\n): Promise<string | null> => {\n  if (isAddress(addressOrEns)) {\n    const ensName = await provider.lookupAddress(addressOrEns);\n    if (ensName !== null) {\n      return _resolveAvatar(provider, ensName, addressOrEns);\n    } else {\n      return null;\n    }\n  } else {\n    const address = await provider.resolveName(addressOrEns);\n    if (address !== null) {\n      return _resolveAvatar(provider, addressOrEns, address);\n    } else {\n      return null;\n    }\n  }\n};\n"],"names":["parseURI","test","resolve","fetch","BigNumber","Contract","isAddress"],"mappings":"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"}