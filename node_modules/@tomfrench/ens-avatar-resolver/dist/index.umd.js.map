{"version":3,"file":"index.umd.js","sources":["../src/resolvers/arweave.ts","../src/utils.ts","../src/resolvers/erc1155.ts","../src/resolvers/erc721.ts","../src/resolvers/fallback.ts","../src/resolvers/index.ts","../src/index.ts"],"sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { Provider } from '@ethersproject/providers';\n\nconst arweaveRegex = new RegExp(/ar:\\/\\/(.*)/);\n\nconst parseURI = (uri: string): string => {\n  const result = arweaveRegex.exec(uri);\n  if (result === null) throw Error('parsing URI failed');\n  const [, transactionId] = result;\n  return transactionId;\n};\n\nconst test = (uri: string): boolean => arweaveRegex.exec(uri) !== null;\n\nconst resolve = async (provider: Provider, ensName: string, address: string, uri: string): Promise<string | null> => {\n  const transactionId = parseURI(uri);\n  const baseUrl = 'https://arweave.net';\n\n  const response = await fetch(`${baseUrl}/graphql`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json;charset=UTF-8',\n    },\n    body: JSON.stringify({\n      query: `\n      {\n        transactions(ids: [\"${transactionId}\"]) {\n          edges {\n            node {\n              id\n              owner {\n                address\n              }\n            }\n          }\n        }\n      }\n      `,\n    }),\n  });\n\n  const { data } = await response.json();\n  const tx = data.transactions.edges[0].node;\n\n  const response2 = await fetch(`${baseUrl}/graphql`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json;charset=UTF-8',\n    },\n    body: JSON.stringify({\n      query: `\n    {\n      transactions(owners: [\"${tx.owner.address}\"], tags: { name: \"Origin\", values: [\"${tx.id}\"] }, sort: HEIGHT_DESC) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n    `,\n    }),\n  });\n\n  const { data: data2 } = await response2.json();\n\n  if (data2 && data2.transactions.edges.length > 0) {\n    return `${baseUrl}/${data2.transactions.edges[0].node.id}`;\n  } else {\n    return `${baseUrl}/${transactionId}`;\n  }\n};\n\nexport const arweaveResolver = {\n  test,\n  resolve,\n};\n","export const getGatewayUrl = (uri: string, tokenId?: string): string => {\n  const match = new RegExp(/([a-z]+)(?::\\/\\/|\\/)(.*)/).exec(uri);\n\n  if (!match || match.length < 3) {\n    return uri;\n  }\n\n  const id = match[2];\n  let url = uri;\n\n  switch (match[1]) {\n    case 'ar': {\n      url = `https://arweave.net/${id}`;\n      break;\n    }\n    case 'ipfs':\n      if (id.includes('ipfs') || id.includes('ipns')) {\n        url = `https://gateway.ipfs.io/${id}`;\n      } else {\n        url = `https://gateway.ipfs.io/ipfs/${id}`;\n      }\n      break;\n    case 'ipns':\n      if (id.includes('ipfs') || id.includes('ipns')) {\n        url = `https://gateway.ipfs.io/${id}`;\n      } else {\n        url = `https://gateway.ipfs.io/ipns/${id}`;\n      }\n      break;\n    case 'http':\n    case 'https':\n      break;\n  }\n\n  return tokenId ? url.replace(/{id}/g, tokenId) : url;\n};\n","import fetch from 'isomorphic-fetch';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { getGatewayUrl } from '../utils';\n\nconst erc1155Regex = new RegExp(/eip155:1\\/erc1155:(\\w+)\\/(\\w+)/);\n\nconst erc1155Abi = [\n  'function balanceOf(address _owner, uint256 _id) view returns (uint256)',\n  'function uri(uint256 _id) view returns (string)',\n];\n\nconst parseURI = (uri: string): [string, BigNumber] => {\n  const result = erc1155Regex.exec(uri);\n  if (result === null) throw Error('parsing URI failed');\n  const [, contractAddress, tokenId] = result;\n  return [contractAddress, BigNumber.from(tokenId)];\n};\n\nconst test = (uri: string): boolean => erc1155Regex.exec(uri) !== null;\n\nconst resolve = async (provider: Provider, ensName: string, address: string, uri: string): Promise<string | null> => {\n  const [contractAddress, tokenId] = parseURI(uri);\n  const erc1155Contract = new Contract(contractAddress, erc1155Abi, provider);\n\n  const userBalance: BigNumber = await erc1155Contract.balanceOf(address, tokenId);\n\n  if (userBalance.isZero()) return null;\n\n  const tokenURI = await erc1155Contract.uri(tokenId);\n\n  const response = await fetch(getGatewayUrl(tokenURI, tokenId.toHexString().slice(2)));\n\n  return (await response.json()).image;\n};\n\nexport const erc1155Resolver = {\n  test,\n  resolve,\n};\n","import fetch from 'isomorphic-fetch';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { getGatewayUrl } from '../utils';\n\nconst erc721Regex = new RegExp(/eip155:1\\/erc721:(\\w+)\\/(\\w+)/);\n\nconst erc721Abi = [\n  'function ownerOf(uint256 tokenId) view returns (address)',\n  'function tokenURI(uint256 _tokenId) external view returns (string)',\n];\n\nconst parseURI = (uri: string): [string, BigNumber] => {\n  const result = erc721Regex.exec(uri);\n  if (result === null) throw Error('parsing URI failed');\n  const [, contractAddress, tokenId] = result;\n  return [contractAddress, BigNumber.from(tokenId)];\n};\n\nconst test = (uri: string): boolean => erc721Regex.exec(uri) !== null;\n\nconst resolve = async (provider: Provider, ensName: string, address: string, uri: string): Promise<string | null> => {\n  const [contractAddress, tokenId] = parseURI(uri);\n  const erc721Contract = new Contract(contractAddress, erc721Abi, provider);\n\n  const tokenOwner = await erc721Contract.ownerOf(tokenId);\n\n  if (tokenOwner.toLowerCase() !== address.toLowerCase()) return null;\n\n  const tokenURI = await erc721Contract.tokenURI(tokenId);\n\n  const response = await fetch(getGatewayUrl(tokenURI, tokenId.toHexString()));\n  return (await response.json()).image;\n};\n\nexport const erc721Resolver = {\n  test,\n  resolve,\n};\n","import { Provider } from '@ethersproject/providers';\nimport { getGatewayUrl } from '../utils';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst test = (uri: string): boolean => true;\n\nconst resolve = async (provider: Provider, ensName: string, address: string, uri: string): Promise<string | null> =>\n  getGatewayUrl(uri);\n\nexport const fallbackResolver = {\n  test,\n  resolve,\n};\n","import { AvatarResolver } from '../types';\nimport { arweaveResolver } from './arweave';\nimport { erc1155Resolver } from './erc1155';\nimport { erc721Resolver } from './erc721';\n\nexport const avatarResolvers: AvatarResolver[] = [erc721Resolver, erc1155Resolver, arweaveResolver];\nexport { fallbackResolver } from './fallback';\n","import { isAddress } from '@ethersproject/address';\nimport { EnsProvider, Provider } from '@ethersproject/providers';\nimport { avatarResolvers, fallbackResolver } from './resolvers';\n\nexport const _resolveAvatar = async (\n  provider: Provider & EnsProvider,\n  ensName: string,\n  address: string\n): Promise<string | null> => {\n  const resolver = await provider.getResolver(ensName);\n  if (resolver === null) return null;\n  const uri = await resolver.getText('avatar');\n  if (uri === null) return null;\n\n  const avatarResolver = avatarResolvers.find((resolver) => resolver.test(uri));\n  try {\n    if (avatarResolver !== undefined) {\n      return await avatarResolver.resolve(provider, ensName, address, uri);\n    }\n    return await fallbackResolver.resolve(provider, ensName, address, uri);\n  } catch {\n    return null;\n  }\n};\n\n/**\n * @notice Resolves the avatar attached to a given ENS name\n * @param provider A provider with ENS resolution capabilities\n * @param addressOrEns The ENS name (or address) to resolve the avatar of.\n * @returns a URL to the provided ENS name's avatar or null if no avatar exists\n */\nexport const resolveENSAvatar = async (\n  provider: Provider & EnsProvider,\n  addressOrEns: string\n): Promise<string | null> => {\n  if (isAddress(addressOrEns)) {\n    const ensName = await provider.lookupAddress(addressOrEns);\n    if (ensName !== null) {\n      return _resolveAvatar(provider, ensName, addressOrEns);\n    } else {\n      return null;\n    }\n  } else {\n    const address = await provider.resolveName(addressOrEns);\n    if (address !== null) {\n      return _resolveAvatar(provider, addressOrEns, address);\n    } else {\n      return null;\n    }\n  }\n};\n"],"names":["parseURI","test","resolve","fetch","BigNumber","Contract","isAddress"],"mappings":"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"}