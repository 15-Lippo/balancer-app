type MatcherFn<T> = (actualValue: T) => boolean;
declare class Matcher<T> {
    readonly asymmetricMatch: MatcherFn<T>;
    private readonly description;
    $$typeof: symbol;
    inverse?: boolean;
    constructor(asymmetricMatch: MatcherFn<T>, description: string);
    toString(): string;
    toAsymmetricMatcher(): string;
    getExpectedType(): string;
}
declare class CaptorMatcher<T> {
    $$typeof: symbol;
    readonly asymmetricMatch: MatcherFn<T>;
    readonly value: T;
    readonly values: T[];
    constructor();
    getExpectedType(): string;
    toString(): string;
    toAsymmetricMatcher(): string;
}
interface MatcherCreator<T, E = T> {
    (expectedValue?: E): Matcher<T>;
}
type MatchersOrLiterals<Y extends any[]> = {
    [K in keyof Y]: Matcher<Y[K]> | Y[K];
};
declare const any: MatcherCreator<any>;
declare const anyBoolean: MatcherCreator<boolean>;
declare const anyNumber: MatcherCreator<number>;
declare const anyString: MatcherCreator<string>;
declare const anyFunction: MatcherCreator<Function>;
declare const anySymbol: MatcherCreator<Symbol>;
declare const anyObject: MatcherCreator<any>;
declare const anyArray: MatcherCreator<any[]>;
declare const anyMap: MatcherCreator<Map<any, any>>;
declare const anySet: MatcherCreator<Set<any>>;
declare const isA: MatcherCreator<any>;
declare const arrayIncludes: MatcherCreator<any[], any>;
declare const setHas: MatcherCreator<Set<any>, any>;
declare const mapHas: MatcherCreator<Map<any, any>, any>;
declare const objectContainsKey: MatcherCreator<any, string>;
declare const objectContainsValue: MatcherCreator<any>;
declare const notNull: MatcherCreator<any>;
declare const notUndefined: MatcherCreator<any>;
declare const notEmpty: MatcherCreator<any>;
declare const captor: <T extends unknown = any>() => CaptorMatcher<T>;
declare const matches: <T extends unknown = any>(matcher: MatcherFn<T>) => Matcher<T>;
export { Matcher, CaptorMatcher, any, anyBoolean, anyNumber, anyString, anyFunction, anySymbol, anyObject, anyArray, anyMap, anySet, isA, arrayIncludes, setHas, mapHas, objectContainsKey, objectContainsValue, notNull, notUndefined, notEmpty, captor, matches, };
export type { MatcherFn, MatchersOrLiterals, MatcherCreator };
//# sourceMappingURL=Matchers.d.ts.map